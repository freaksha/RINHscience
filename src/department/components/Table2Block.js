import React from 'react';
import Link from '@material-ui/core/Link';
import { makeStyles } from '@material-ui/core/styles';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import {Typography} from "@material-ui/core";


// Generate Order Data
function createData(id, name, count, porog) {
    return { id, name, count, porog };
}

const rows = [
    createData(1, 'Средний балл ЕГЭ студентов, принятых по результатам ЕГЭ на обучение по очной форме по программам бакалавриата и специалитета за счет средств соответствующих бюджетов бюджетной системы РФ', "балл", 70.98, ),
    createData(2, 'Средний балл ЕГЭ студентов университета, принятых по результатам ЕГЭ на обучение по очной форме по программам бакалавриата и специалитета за счет средств соответствующих бюджетов бюджетной системы Российской Федерации, за исключением лиц, поступивших с учетом особых прав и в рамках квоты целевого приема', "балл", 70.82, ),
    createData(3, 'Средний балл ЕГЭ студентов, принятых по результатам ЕГЭ на обучение по очной форме по программам бакалавриата и специалитета с оплатой стоимости затрат на обучение физическими и юридическими лицами', "балл", 59.26, ),
    createData(4, 'Усредненный по реализуемым направлениям (специальностям) минимальный балл ЕГЭ студентов, принятых по результатам ЕГЭ на обучение по очной форме на программы бакалавриата и специалитета', "балл", 43.94, ),
    createData(5, 'Численность студентов, победителей и призеров заключительного этапа всероссийской олимпиады школьников, членов сборных команд Российской Федерации, участвовавших в международных олимпиадах по общеобразовательным предметам по специальностям и (или) направлениям подготовки, соответствующим профилю всероссийской олимпиады школьников или международной олимпиады, принятых на очную форму обучения на первый курс по программам бакалавриата и специалитета без вступительных испытаний', "человек", 0, ),
    createData(6, 'Численность студентов, победителей и призеров олимпиад школьников, принятых на очную форму обучения на первый курс по программам бакалавриата и специалитета по специальностям и (или) направлениям подготовки, соответствующим профилю олимпиады школьников, без вступительных испытаний', "человек", 1, ),
    createData(7, 'Численность студентов, принятых по результатам целевого приема на первый курс на очную форму обучения по программам бакалавриата и специалитета\t', "человек", 4, ),
    createData(8, 'Удельный вес численности студентов, принятых по результатам целевого приема на первый курс на очную форму обучения по программам бакалавриата и специалитета в общей численности студентов, принятых на первый курс по программам бакалавриата и специалитета на очную форму обучения\t', "%", 0.34, ),
    createData(9, 'Удельный вес численности студентов (приведенного контингента), обучающихся по программам магистратуры, в общей численности приведенного контингента обучающихся по образовательным программам бакалавриата, специалитета и магистратуры', "%", 12.78, ),
    createData(10, 'Удельный вес численности обучающихся (приведенного контингента), по программам магистратуры, подготовки научно-педагогических кадров в аспирантуре (адъюнктуре), ординатуры, ассистентуры-стажировки в общей численности приведенного контингента обучающихся по основным образовательным программам высшего образования\t', "%", 12.78, ),
    createData(11, 'Удельный вес численности студентов, имеющих диплом бакалавра, специалиста или магистра других организаций, принятых на первый курс на обучение по программам магистратуры образовательной организации, в общей численности студентов, принятых на первый курс по программам магистратуры на очную форму обучения\t', "%", 27.78, ),
    createData(12, 'Удельный вес численности обучающихся по программам магистратуры, подготовки научно-педагогических кадров в аспирантуре (адъюнктуре), ординатуры, ассистентуры-стажировки, имеющих диплом бакалавра, диплом специалиста или диплом магистра других организаций в общей численности обучающихся по программам магистратуры, подготовки научно-педагогических кадров в аспирантуре (адъюнктуре), ординатуры, ассистентуры-стажировки\t', "%", 42.78, ),
    createData(13, 'Численность аспирантов (адъюнктов), ординаторов, ассистентов-стажеров образовательной организации в расчете на 100 студентов (приведенного контингента)\t', "человек", 4.06, ),
    createData(14, 'Удельный вес численности слушателей из сторонних организаций в общей численности слушателей, прошедших обучение в образовательной организации по программам повышения квалификации или профессиональной переподготовки\t', "%", 290.36, ),
    createData(15, 'Удельный вес численности студентов, обучающихся по направлениям подготовки бакалавриата, специалитета, и магистратуры по областям знаний «Инженерное дело, технологии и технические науки», «Здравоохранение и медицинские науки», «Образование и педагогические науки», с которыми заключены договоры о целевом обучении, в общей численности студентов, обучающихся по указанным областям знаний\t', "%", 0.16, ),
];

function preventDefault(event) {
    event.preventDefault();
}

const useStyles = makeStyles((theme) => ({
    image: {
        width: "100%",
        height: '100%',
    },
    row: {
        flexDirection: "column",
        display: "flex",
        width: "100%",
        height: '100%',
    }
}));

export default function Table2Block() {
    const classes = useStyles();
    return (
        <React.Fragment style={{width: "100%", display: "flex",height: '100%',}}>
            <Table size="small" style={{display: "flex",width: "100%",height: '100%',}}><div style={{width: "100%",height: '100%',}}>
                <TableHead style={{width: "100%",height: '100%',}}>
                    <TableRow style={{width: "100%",height: '100%',}}>
                        <TableCell><Link style={{color: "linear-gradient(to right, #515696, #5E8DDD);", textDecoration: 'none' }}>№</Link></TableCell>
                        <TableCell style={{width: "100%"}}><Link style={{ width: "100%", color: "linear-gradient(to right, #515696, #5E8DDD);", textDecoration: 'none' }}>Наименование показателя</Link></TableCell>
                        <TableCell style={{width: "100%"}}><Link style={{ width: "100%", color: "linear-gradient(to right, #515696, #5E8DDD);", textDecoration: 'none' }}>Единица измерения</Link></TableCell>
                        <TableCell style={{width: "100%"}}><Link style={{ width: "100%", color: "linear-gradient(to right, #515696, #5E8DDD);", textDecoration: 'none' }}>Значение показателя</Link></TableCell>
                    </TableRow>
                </TableHead>
                <TableBody style={{width: "100%",height: '100%',}}>
                    {rows.map((row) => (
                        <TableRow key={row.id}>
                            <TableCell>{row.id}</TableCell>
                            <TableCell><Typography variant="subtitle1" color="textSecondary">{row.name}</Typography></TableCell>
                            <TableCell>{row.count}</TableCell>
                            <TableCell>{row.porog}</TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </div></Table>

        </React.Fragment>
    );
}